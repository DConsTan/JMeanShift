/*
 * Copyright(c) 2010-2011, Diego Schmaedech Martins (UFSM, Federal University of Santa Maria, Brazil).
 *
 *
 * All rights reserved.
 *
 * COMMERCIAL USE:
 * This library is part of Mothorus Eye Tracker developed under
 *                  GNU LESSER GENERAL PUBLIC LICENSE
 *                   Version 3, 29 June 2007 License
 * If you have any commercial interest in this work please contact schmadech@gmail.com
 *
 *


 IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.

 By downloading, copying, installing or using the software you agree to this license.
 If you do not agree to this license, do not download, install, copy or use the software.


 Intel License Agreement
 For Open Source Computer Vision Library

 Copyright (C) 2000, Intel Corporation, all rights reserved.
 Third party copyrights are property of their respective owners.

 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:

 * Redistribution's of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 * Redistribution's in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.

 * The name of Intel Corporation may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 This software is provided by the copyright holders and contributors "as is" and
 any express or implied warranties, including, but not limited to, the implied
 warranties of merchantability and fitness for a particular purpose are disclaimed.
 In no event shall the Intel Corporation or contributors be liable for any direct,
 indirect, incidental, special, exemplary, or consequential damages
 (including, but not limited to, procurement of substitute goods or services;
 loss of use, data, or profits; or business interruption) however caused
 and on any theory of liability, whether in contract, strict liability,
 or tort (including negligence or otherwise) arising in any way out of
 the use of this software, even if advised of the possibility of such damage.
 *
 */
package jmeanshift;

import ui.ImageFileView;
import ui.ImageFilter;
import ui.ImagePreview;
import ui.LoadAndShow;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JScrollPane;

/**
 * Created on Oct 27, 2010, 11:43:06 PM
 *
 * @author Diego Schmaedech
 */
public class MeanFrame extends javax.swing.JFrame {

    /**
     * Creates new form MeanFrame
     */
    public MeanFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jtfBandwidth = new javax.swing.JTextField();
        jbDoMeanShift = new javax.swing.JButton();
        jDesktopPane1 = new javax.swing.JDesktopPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        jButton1.setText("Open Images...");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setText("Chart");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);
        jToolBar1.add(jSeparator1);

        jtfBandwidth.setColumns(5);
        jtfBandwidth.setText("1");
        jtfBandwidth.setToolTipText("Valor deve ser entre 1 e 255");
        jToolBar1.add(jtfBandwidth);

        jbDoMeanShift.setText("Do Mean-Shift");
        jbDoMeanShift.setToolTipText("Executa o Mean-Shift");
        jbDoMeanShift.setFocusable(false);
        jbDoMeanShift.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbDoMeanShift.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbDoMeanShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDoMeanShiftActionPerformed(evt);
            }
        });
        jToolBar1.add(jbDoMeanShift);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static BufferedImage makeBufferedImage(Image image, int imageType) {

        BufferedImage bufferedImage = new BufferedImage(
                image.getWidth(null), image.getHeight(null), imageType);
        Graphics2D g2 = bufferedImage.createGraphics();
        g2.drawImage(image, null, null);
        return bufferedImage;
    }

    private void jbDoMeanShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDoMeanShiftActionPerformed
        double bandwidth = Double.parseDouble(jtfBandwidth.getText());
        MeanShift meanshift = new MeanShift();

        JInternalFrame iframe = new JInternalFrame("Mean-Shift Result", true, true, true, true);
        LoadAndShow ipanel = new LoadAndShow(meanshift.doMeanShiftWithImages(images, bandwidth));
        iframe.pack();
        iframe.setSize(ipanel.getPreferredSize());
        iframe.add(new JScrollPane(ipanel));
        iframe.setVisible(true);
        jDesktopPane1.add(iframe);
    }//GEN-LAST:event_jbDoMeanShiftActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Set up the file chooser.
        if (fc == null) {
            fc = new JFileChooser();

            //Add a custom file filter and disable the default
            //(Accept All) file filter.
            fc.addChoosableFileFilter(new ImageFilter());
            fc.setAcceptAllFileFilterUsed(false);
            fc.setMultiSelectionEnabled(true);
            //Add custom icons for file types.
            fc.setFileView(new ImageFileView());

            //Add the preview pane.
            fc.setAccessory(new ImagePreview(fc));
        }

        //Show it.
        int returnVal = fc.showDialog(MeanFrame.this, "Attach");

        //Process the results.
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File[] file = fc.getSelectedFiles();
            for (File f : file) {
                try {
                    //log.append("path:"+f.getAbsolutePath() + newline);

                    images.add(ImageIO.read(f));
                    JInternalFrame iframe = new JInternalFrame(f.getAbsolutePath(), true, true, true, true);
                    LoadAndShow ipanel = new LoadAndShow(images.lastElement());
                    iframe.pack();
                    iframe.setSize(ipanel.getPreferredSize());
                    iframe.add(new JScrollPane(ipanel));
                    iframe.setVisible(true);
                    jDesktopPane1.add(iframe);

                } catch (IOException ex) {
                    Logger.getLogger(MeanFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {

        }

        //Reset the file chooser for the next time it's shown.
        fc.setSelectedFile(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JInternalFrame iframe = new JInternalFrame("Chart", true, true, true, true);
        ChartProof cpPanel = new ChartProof();
        iframe.pack();
        iframe.setSize((int) cpPanel.getPreferredSize().getWidth() + 50, (int) cpPanel.getPreferredSize().getHeight() + 50);
        iframe.add(new JScrollPane(cpPanel));
        iframe.setVisible(true);
        jDesktopPane1.add(iframe);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MeanFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton jbDoMeanShift;
    private javax.swing.JTextField jtfBandwidth;
    // End of variables declaration//GEN-END:variables

    private JFileChooser fc;
    private Vector<BufferedImage> images = new Vector<BufferedImage>();

}
